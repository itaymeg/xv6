diff --git a/Makefile b/Makefile
index b4fd9a2..acd7b3e 100644
--- a/Makefile
+++ b/Makefile
@@ -172,9 +172,10 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_mount\
 
-fs.img: mkfs README $(UPROGS)
-	./mkfs fs.img README $(UPROGS)
+fs.img: mkfs bootblock kernel README $(UPROGS)
+	./mkfs fs.img bootblock kernel README $(UPROGS)
 
 -include *.d
 
@@ -210,7 +211,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 ifndef CPUS
 CPUS := 2
 endif
-QEMUOPTS = -hdb fs.img xv6.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
+QEMUOPTS = -hda fs.img -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
 qemu: fs.img xv6.img
 	$(QEMU) -serial mon:stdio $(QEMUOPTS)
diff --git a/defs.h b/defs.h
index b47372b..6000f2c 100644
--- a/defs.h
+++ b/defs.h
@@ -51,7 +51,7 @@ struct inode*   nameiparent(char*, char*);
 int             readi(struct inode*, char*, uint, uint);
 void            stati(struct inode*, struct stat*);
 int             writei(struct inode*, char*, uint, uint);
-
+int             mount(char* path, uint partition);
 // ide.c
 void            ideinit(void);
 void            ideintr(void);
diff --git a/file.h b/file.h
index 5a4a463..3e94121 100644
--- a/file.h
+++ b/file.h
@@ -22,6 +22,8 @@ struct inode {
   short nlink;
   uint size;
   uint addrs[NDIRECT+1];
+  
+  uint partition;
 };
 #define I_BUSY 0x1
 #define I_VALID 0x2
diff --git a/fs.c b/fs.c
index 025b326..5aff805 100644
--- a/fs.c
+++ b/fs.c
@@ -19,19 +19,48 @@
 #include "fs.h"
 #include "buf.h"
 #include "file.h"
+#include "mbr.h"
 
 #define min(a, b) ((a) < (b) ? (a) : (b))
 static void itrunc(struct inode*);
-struct superblock sb;   // there should be one per dev, but we run with one dev
+struct superblock sb[4];   // there should be one per dev, but we run with one dev
+struct mbr mbr;
+int partitionoffset;
+int partitionindex;
+
+
+struct mount_point{
+  int partition;
+  int used;
+  struct inode *inode;
+  char path[100];
+};
+
+struct mount_point mount_table[200*4];
+
 
 // Read the super block.
 void
 readsb(int dev, struct superblock *sb)
 {
+  int i=0;
   struct buf *bp;
-  
-  bp = bread(dev, 1);
-  memmove(sb, bp->data, sizeof(*sb));
+  for(i=0;i<4;i++){ 
+    if(mbr.partitions[i].flags & PART_ALLOCATED){
+      bp = bread(dev,mbr.partitions[i].offset);
+      memmove(&sb[i], bp->data, sizeof(sb[i]));
+      sb[i].offset = mbr.partitions[i].offset;
+      brelse(bp);
+    }
+  }
+}
+
+void
+readmbr(struct mbr *mbr)
+{
+  struct buf *bp;
+  bp = bread(ROOTDEV, 0);
+  memmove(mbr, bp->data, sizeof(*mbr));
   brelse(bp);
 }
 
@@ -41,7 +70,7 @@ bzero(int dev, int bno)
 {
   struct buf *bp;
   
-  bp = bread(dev, bno);
+  bp = bread(dev, bno + partitionoffset);
   memset(bp->data, 0, BSIZE);
   log_write(bp);
   brelse(bp);
@@ -57,9 +86,9 @@ balloc(uint dev)
   struct buf *bp;
 
   bp = 0;
-  for(b = 0; b < sb.size; b += BPB){
-    bp = bread(dev, BBLOCK(b, sb));
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
+  for(b = 0; b < sb[partitionindex].size; b += BPB){
+    bp = bread(dev, BBLOCK(b, sb[partitionindex])+partitionoffset);
+    for(bi = 0; bi < BPB && b + bi < sb[partitionindex].size; bi++){
       m = 1 << (bi % 8);
       if((bp->data[bi/8] & m) == 0){  // Is block free?
         bp->data[bi/8] |= m;  // Mark block in use.
@@ -81,8 +110,8 @@ bfree(int dev, uint b)
   struct buf *bp;
   int bi, m;
 
-  readsb(dev, &sb);
-  bp = bread(dev, BBLOCK(b, sb));
+  readsb(dev, &sb[partitionindex]);
+  bp = bread(dev, BBLOCK(b, sb[partitionindex])+partitionoffset);
   bi = b % BPB;
   m = 1 << (bi % 8);
   if((bp->data[bi/8] & m) == 0)
@@ -162,13 +191,42 @@ struct {
 void
 iinit(int dev)
 {
+  int i=0;
+  char *type;
   initlock(&icache.lock, "icache");
-  readsb(dev, &sb);
-  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d inodestart %d bmap start %d\n", sb.size,
-          sb.nblocks, sb.ninodes, sb.nlog, sb.logstart, sb.inodestart, sb.bmapstart);
+  readmbr(&mbr);
+  for(i=0;i<200*4;i++){
+    mount_table[i].used =0;
+  }
+  for(i=0;i<4;i++){ 
+    if(mbr.partitions[i].flags & PART_BOOTABLE){
+      partitionoffset = mbr.partitions[i].offset;
+      partitionindex = i;
+      break;
+    }
+  }
+  for(i=0;i<4;i++){ 
+      if(mbr.partitions[i].flags & PART_ALLOCATED){
+	if(mbr.partitions[i].type == FS_INODE){
+	  type = "INODE";
+	}else{
+	  type = "FAT";
+	}
+	if(mbr.partitions[i].flags & PART_BOOTABLE){
+	  cprintf("Partition %d: bootable YES, type %s, offset %d, size %d\n",i,type,mbr.partitions[i].offset,mbr.partitions[i].size);
+	}
+	else{
+	  cprintf("Partition %d: bootable NO, type %s, offset %d, size %d\n",i,type,mbr.partitions[i].offset,mbr.partitions[i].size);
+	}
+      }
+  }
+  
+  readsb(dev,sb);
+  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d inodestart %d bmap start %d\n", sb[partitionindex].size,
+          sb[partitionindex].nblocks, sb[partitionindex].ninodes, sb[partitionindex].nlog, sb[partitionindex].logstart, sb[partitionindex].inodestart, sb[partitionindex].bmapstart);
 }
 
-static struct inode* iget(uint dev, uint inum);
+static struct inode* iget(uint dev, uint inum,uint partition);
 
 //PAGEBREAK!
 // Allocate a new inode with the given type on device dev.
@@ -180,15 +238,15 @@ ialloc(uint dev, short type)
   struct buf *bp;
   struct dinode *dip;
 
-  for(inum = 1; inum < sb.ninodes; inum++){
-    bp = bread(dev, IBLOCK(inum, sb));
+  for(inum = 1; inum < sb[partitionindex].ninodes; inum++){
+    bp = bread(dev, IBLOCK(inum, sb[partitionindex])+partitionoffset);
     dip = (struct dinode*)bp->data + inum%IPB;
     if(dip->type == 0){  // a free inode
       memset(dip, 0, sizeof(*dip));
       dip->type = type;
       log_write(bp);   // mark it allocated on the disk
       brelse(bp);
-      return iget(dev, inum);
+      return iget(dev, inum,partitionindex);
     }
     brelse(bp);
   }
@@ -202,7 +260,7 @@ iupdate(struct inode *ip)
   struct buf *bp;
   struct dinode *dip;
 
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+  bp = bread(ip->dev, IBLOCK(ip->inum, sb[partitionindex])+partitionoffset);
   dip = (struct dinode*)bp->data + ip->inum%IPB;
   dip->type = ip->type;
   dip->major = ip->major;
@@ -218,7 +276,7 @@ iupdate(struct inode *ip)
 // and return the in-memory copy. Does not lock
 // the inode and does not read it from disk.
 static struct inode*
-iget(uint dev, uint inum)
+iget(uint dev, uint inum, uint partition)
 {
   struct inode *ip, *empty;
 
@@ -227,7 +285,8 @@ iget(uint dev, uint inum)
   // Is the inode already cached?
   empty = 0;
   for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
+    
+    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum && ip->partition == partition){
       ip->ref++;
       release(&icache.lock);
       return ip;
@@ -242,6 +301,7 @@ iget(uint dev, uint inum)
 
   ip = empty;
   ip->dev = dev;
+  ip->partition = partition;
   ip->inum = inum;
   ip->ref = 1;
   ip->flags = 0;
@@ -250,6 +310,9 @@ iget(uint dev, uint inum)
   return ip;
 }
 
+
+
+
 // Increment reference count for ip.
 // Returns ip to enable ip = idup(ip1) idiom.
 struct inode*
@@ -279,7 +342,7 @@ ilock(struct inode *ip)
   release(&icache.lock);
 
   if(!(ip->flags & I_VALID)){
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
+    bp = bread(ip->dev, IBLOCK(ip->inum, sb[partitionindex])+partitionoffset);
     dip = (struct dinode*)bp->data + ip->inum%IPB;
     ip->type = dip->type;
     ip->major = dip->major;
@@ -329,6 +392,7 @@ iput(struct inode *ip)
     iupdate(ip);
     acquire(&icache.lock);
     ip->flags = 0;
+    ip->partition = -1;
     wakeup(ip);
   }
   ip->ref--;
@@ -370,7 +434,7 @@ bmap(struct inode *ip, uint bn)
     // Load indirect block, allocating if necessary.
     if((addr = ip->addrs[NDIRECT]) == 0)
       ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    bp = bread(ip->dev, addr);
+    bp = bread(ip->dev, addr+partitionoffset);
     a = (uint*)bp->data;
     if((addr = a[bn]) == 0){
       a[bn] = addr = balloc(ip->dev);
@@ -403,7 +467,7 @@ itrunc(struct inode *ip)
   }
   
   if(ip->addrs[NDIRECT]){
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
+    bp = bread(ip->dev, ip->addrs[NDIRECT]+partitionoffset);
     a = (uint*)bp->data;
     for(j = 0; j < NINDIRECT; j++){
       if(a[j])
@@ -449,7 +513,7 @@ readi(struct inode *ip, char *dst, uint off, uint n)
     n = ip->size - off;
 
   for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    bp = bread(ip->dev, bmap(ip, off/BSIZE)+partitionoffset);
     m = min(n - tot, BSIZE - off%BSIZE);
     memmove(dst, bp->data + off%BSIZE, m);
     brelse(bp);
@@ -477,7 +541,7 @@ writei(struct inode *ip, char *src, uint off, uint n)
     return -1;
 
   for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
+    bp = bread(ip->dev, bmap(ip, off/BSIZE)+partitionoffset);
     m = min(n - tot, BSIZE - off%BSIZE);
     memmove(bp->data + off%BSIZE, src, m);
     log_write(bp);
@@ -507,6 +571,7 @@ dirlookup(struct inode *dp, char *name, uint *poff)
 {
   uint off, inum;
   struct dirent de;
+  int i;
 
   if(dp->type != T_DIR)
     panic("dirlookup not DIR");
@@ -521,7 +586,14 @@ dirlookup(struct inode *dp, char *name, uint *poff)
       if(poff)
         *poff = off;
       inum = de.inum;
-      return iget(dp->dev, inum);
+      // if mount
+      for(i=0*(dp->partition);i<200*(dp->partition+1);i++){
+	if(mount_table[i].inode->inum == inum && mount_table[i].used ==1){
+	  //cprintf("**************dirlookup *******name: %s mounted to partition: %d\n",name,mount_table[i].partition);
+	  return iget(dp->dev,ROOTINO,mount_table[i].partition);
+	}
+      }
+      return iget(dp->dev, inum,dp->partition);
     }
   }
 
@@ -602,13 +674,14 @@ skipelem(char *path, char *name)
 // If parent != 0, return the inode for the parent and copy the final
 // path element into name, which must have room for DIRSIZ bytes.
 // Must be called inside a transaction since it calls iput().
+
 static struct inode*
 namex(char *path, int nameiparent, char *name)
 {
   struct inode *ip, *next;
 
   if(*path == '/')
-    ip = iget(ROOTDEV, ROOTINO);
+    ip = iget(ROOTDEV, ROOTINO,partitionindex);
   else
     ip = idup(proc->cwd);
 
@@ -649,3 +722,51 @@ nameiparent(char *path, char *name)
 {
   return namex(path, 1, name);
 }
+
+
+int 
+mount(char* path, uint partition){
+  int i;
+  if(mbr.partitions[partition].flags & PART_ALLOCATED){
+    for(i=0;i<4*200;i++){
+      if(strncmp(mount_table[i].path,path,strlen(path))==0){
+	mount_table[i].used=0;
+	break;
+      }
+    }
+    for(i=200*(proc->cwd->partition);i<200*((proc->cwd->partition)+1);i++){
+      if(mount_table[i].used == 0){
+	mount_table[i].used=1;
+	mount_table[i].partition =partition;
+	memset(mount_table[i].path,0,100);
+	strncpy(mount_table[i].path,path,strlen(path));
+	mount_table[i].inode = namei(path); 
+	if(mount_table[i].inode ==0){
+	  mount_table[i].used=0;
+	  cprintf("not exist\n");
+	  return -1;
+	}
+	return 0;
+      }
+    }
+    cprintf("all in use\n");
+    return -1;
+  }
+  cprintf("not allocated\n");
+  return -1;
+}
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/fs.h b/fs.h
index e1d7d09..065190f 100644
--- a/fs.h
+++ b/fs.h
@@ -18,6 +18,7 @@ struct superblock {
   uint logstart;     // Block number of first log block
   uint inodestart;   // Block number of first inode block
   uint bmapstart;    // Block number of first free map block
+  uint offset;
 };
 
 #define NDIRECT 12
diff --git a/log.c b/log.c
index 12db8ca..512cfc8 100644
--- a/log.c
+++ b/log.c
@@ -48,18 +48,18 @@ struct log log;
 
 static void recover_from_log(void);
 static void commit();
-
+extern int partitionindex;
+struct superblock sb[4];
+  
 void
 initlog(int dev)
 {
   if (sizeof(struct logheader) >= BSIZE)
     panic("initlog: too big logheader");
-
-  struct superblock sb;
   initlock(&log.lock, "log");
-  readsb(dev, &sb);
-  log.start = sb.logstart;
-  log.size = sb.nlog;
+  readsb(dev, sb);
+  log.start = sb[partitionindex].logstart  + sb[partitionindex].offset;
+  log.size = sb[partitionindex].nlog;
   log.dev = dev;
   recover_from_log();
 }
diff --git a/mbr.h b/mbr.h
new file mode 100644
index 0000000..32d3b96
--- /dev/null
+++ b/mbr.h
@@ -0,0 +1,32 @@
+#define BOOTSTRAP 446
+
+#define NPARTITIONS 4
+
+#define PART_ALLOCATED	1	// allocated partition
+#define PART_BOOTABLE	2	// bootable partition
+
+#define FS_INODE		0 	// inode based partition
+#define FS_FAT	 		1	// fat based partition
+
+struct dpartition {
+	uint flags;
+	uint type;	
+	uint offset;
+	uint size;
+};
+
+#pragma pack(1)				// prevents the compiler from aligning (padding) generated code for 4 byte boundary
+struct mbr {
+	uchar bootstrap[BOOTSTRAP];
+	struct dpartition partitions[NPARTITIONS];
+	uchar magic[2];
+};
+
+struct partition {
+	uint dev;
+
+	uint flags;	
+	uint type;	
+	uint offset;
+	uint size;
+};
\ No newline at end of file
diff --git a/mkfs.c b/mkfs.c
index 0a10754..43402c4 100644
--- a/mkfs.c
+++ b/mkfs.c
@@ -10,6 +10,7 @@
 #include "fs.h"
 #include "stat.h"
 #include "param.h"
+#include "mbr.h"
 
 #ifndef static_assert
 #define static_assert(a, b) do { switch (0) case 0: case (a): ; } while (0)
@@ -28,9 +29,11 @@ int nblocks;  // Number of data blocks
 
 int fsfd;
 struct superblock sb;
+struct mbr mbr;
 char zeroes[BSIZE];
 uint freeinode = 1;
 uint freeblock;
+int partitionoffset = 0;
 
 
 void balloc(int);
@@ -67,16 +70,24 @@ xint(uint x)
 int
 main(int argc, char *argv[])
 {
-  int i, cc, fd;
+  int i, cc, fd,j,k;
   uint rootino, inum, off;
   struct dirent de;
   char buf[BSIZE];
   struct dinode din;
+  int kernel;
+  int countkernel = 1;
+  int bootblock;
+  char buf1[BSIZE];
+  char boot[BSIZE];
+  int bootablefound=0;
+  int hasinit = 0;
+  int hassh = 0;
 
 
   static_assert(sizeof(int) == 4, "Integers must be 4 bytes!");
 
-  if(argc < 2){
+  if(argc < 4){
     fprintf(stderr, "Usage: mkfs fs.img files...\n");
     exit(1);
   }
@@ -89,88 +100,151 @@ main(int argc, char *argv[])
     perror(argv[1]);
     exit(1);
   }
-
+ 
+  bootblock = open(argv[2],0);
+  if(bootblock < 0){
+    perror(argv[2]);
+    exit(1);
+  }
+  read(bootblock,boot,BSIZE);
+  memmove(mbr.bootstrap, boot, BSIZE);
+  mbr.magic[0] = boot[BSIZE-2];
+  mbr.magic[1] = boot[BSIZE-1];
+  close(bootblock);
+  
+  
+  for(i = 0; i < 5000; i++){
+    partitionoffset = 0;
+    wsect(i, zeroes);
+  }
+  
+  kernel = open(argv[3],0);
+  if(kernel < 0){
+    perror(argv[3]);
+    exit(1);
+  }
+  while(read(kernel,buf1,BSIZE)>0){
+   wsect(countkernel,buf1);
+    countkernel++;
+    memset(buf1, 0, sizeof(buf1));
+  }
+  
+  close(kernel);
   // 1 fs block = 1 disk sector
-  nmeta = 2 + nlog + ninodeblocks + nbitmap;
-  nblocks = FSSIZE - nmeta;
 
-  sb.size = xint(FSSIZE);
-  sb.nblocks = xint(nblocks);
-  sb.ninodes = xint(NINODES);
-  sb.nlog = xint(nlog);
-  sb.logstart = xint(2);
-  sb.inodestart = xint(2+nlog);
-  sb.bmapstart = xint(2+nlog+ninodeblocks);
 
-  printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
-         nmeta, nlog, ninodeblocks, nbitmap, nblocks, FSSIZE);
+  for(i=0;i<NPARTITIONS;i++){	
+    nmeta = 1 + nlog + ninodeblocks + nbitmap;
+    nblocks = PSIZE - nmeta;
+    
+    freeinode = 1;
+    bzero(&de, sizeof(de));
+    
+    mbr.partitions[i].flags = PART_ALLOCATED;
+    mbr.partitions[i].type = FS_INODE;
+    mbr.partitions[i].offset = countkernel+PSIZE*i;
+    mbr.partitions[i].size = PSIZE;
+    
+    sb.size = xint(PSIZE);
+    sb.nblocks = xint(nblocks);
+    sb.ninodes = xint(NINODES);
+    sb.nlog = xint(nlog);
+    sb.logstart = xint(1);
+    sb.inodestart = xint(1+nlog);
+    sb.bmapstart = xint(1+nlog+ninodeblocks);
+    
+    
+    printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
+         nmeta, nlog, ninodeblocks, nbitmap, nblocks,PSIZE);
+    
+    freeblock = nmeta;     // the first free block that we can allocate
+    
+    memset(buf, 0, sizeof(buf));
+    memmove(buf, &sb, sizeof(sb));
+    partitionoffset = mbr.partitions[i].offset;
+    wsect(0, buf);
+    
+    
+    rootino = ialloc(T_DIR);
+    assert(rootino == ROOTINO);
 
-  freeblock = nmeta;     // the first free block that we can allocate
+    bzero(&de, sizeof(de));
+    de.inum = xshort(rootino);
+    strcpy(de.name, ".");
+    iappend(rootino, &de, sizeof(de));
 
-  for(i = 0; i < FSSIZE; i++)
-    wsect(i, zeroes);
+    bzero(&de, sizeof(de));
+    de.inum = xshort(rootino);
+    strcpy(de.name, "..");
+    iappend(rootino, &de, sizeof(de));
 
-  memset(buf, 0, sizeof(buf));
-  memmove(buf, &sb, sizeof(sb));
-  wsect(1, buf);
+    for(j = 4; j < argc; j++){
+      assert(index(argv[j], '/') == 0);
 
-  rootino = ialloc(T_DIR);
-  assert(rootino == ROOTINO);
+      if((fd = open(argv[j], 0)) < 0){
+	perror(argv[j]);
+	exit(1);
+      }
+      
+      char filename[strlen(argv[j])];
+      strncpy(filename,argv[j],strlen(argv[j]));
+      if(filename[0] == '_'){
+        for(k=1; k < strlen(argv[j]); k++){
+          filename[k-1] = argv[j][k];
+        }
+        filename[strlen(argv[j])-1] = 0;
+      }
+      if(strncmp(filename,"sh",3) == 0){
+	hassh = 1;
+      }
+      if(strncmp(filename,"init",5) == 0){
+	hasinit=1;
+      }
+      // Skip leading _ in name when writing to file system.
+      // The binaries are named _rm, _cat, etc. to keep the
+      // build operating system from trying to execute them
+      // in place of system binaries like rm and cat.
 
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, ".");
-  iappend(rootino, &de, sizeof(de));
+      inum = ialloc(T_FILE);
 
-  bzero(&de, sizeof(de));
-  de.inum = xshort(rootino);
-  strcpy(de.name, "..");
-  iappend(rootino, &de, sizeof(de));
+      bzero(&de, sizeof(de));
+      de.inum = xshort(inum);
+      strncpy(de.name,filename, DIRSIZ);
+      iappend(rootino, &de, sizeof(de));
 
-  for(i = 2; i < argc; i++){
-    assert(index(argv[i], '/') == 0);
+      while((cc = read(fd, buf, sizeof(buf))) > 0)
+	iappend(inum, buf, cc);
 
-    if((fd = open(argv[i], 0)) < 0){
-      perror(argv[i]);
-      exit(1);
+      close(fd);
     }
-    
-    // Skip leading _ in name when writing to file system.
-    // The binaries are named _rm, _cat, etc. to keep the
-    // build operating system from trying to execute them
-    // in place of system binaries like rm and cat.
-    if(argv[i][0] == '_')
-      ++argv[i];
 
-    inum = ialloc(T_FILE);
-
-    bzero(&de, sizeof(de));
-    de.inum = xshort(inum);
-    strncpy(de.name, argv[i], DIRSIZ);
-    iappend(rootino, &de, sizeof(de));
+    if( hassh ==1 && hasinit == 1 && bootablefound == 0){
+      mbr.partitions[i].flags |= PART_BOOTABLE;
+      bootablefound = 1;
+    }
 
-    while((cc = read(fd, buf, sizeof(buf))) > 0)
-      iappend(inum, buf, cc);
+    // fix size of root inode dir
+    rinode(rootino, &din);
+    off = xint(din.size);
+    off = ((off/BSIZE) + 1) * BSIZE;
+    din.size = xint(off);
+    winode(rootino, &din);
 
-    close(fd);
+    balloc(freeblock);
   }
 
-  // fix size of root inode dir
-  rinode(rootino, &din);
-  off = xint(din.size);
-  off = ((off/BSIZE) + 1) * BSIZE;
-  din.size = xint(off);
-  winode(rootino, &din);
-
-  balloc(freeblock);
-
+  memset(buf, 0, sizeof(buf));
+  memmove(buf, &mbr, sizeof(mbr));
+  partitionoffset = 0;
+  wsect(0, buf);
+  
   exit(0);
 }
 
 void
 wsect(uint sec, void *buf)
 {
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
+  if(lseek(fsfd, (sec + partitionoffset)* BSIZE, 0) != (sec+partitionoffset) * BSIZE){
     perror("lseek");
     exit(1);
   }
@@ -210,7 +284,7 @@ rinode(uint inum, struct dinode *ip)
 void
 rsect(uint sec, void *buf)
 {
-  if(lseek(fsfd, sec * BSIZE, 0) != sec * BSIZE){
+  if(lseek(fsfd, (sec+partitionoffset) * BSIZE, 0) != (sec+partitionoffset) * BSIZE){
     perror("lseek");
     exit(1);
   }
diff --git a/mount.c b/mount.c
new file mode 100644
index 0000000..740dd48
--- /dev/null
+++ b/mount.c
@@ -0,0 +1,15 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+	if(argc != 3){
+		exit();
+	}
+	if(mount(argv[1],(uint)atoi(argv[2])) != 0)
+		printf(1,"mount failed \n");
+	exit();
+} 
+ 
diff --git a/param.h b/param.h
index a7e90ef..0d69ba7 100644
--- a/param.h
+++ b/param.h
@@ -5,10 +5,11 @@
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
 #define NDEV         10  // maximum major device number
-#define ROOTDEV       1  // device number of file system root disk
+#define ROOTDEV       0  // device number of file system root disk
 #define MAXARG       32  // max exec arguments
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
+#define FSSIZE       4500  // size of file system in blocks
+#define PSIZE        1000 // size of partition in blocks
 
diff --git a/proc.c b/proc.c
index 3ac41f6..b6086ef 100644
--- a/proc.c
+++ b/proc.c
@@ -97,7 +97,6 @@ userinit(void)
   p->tf->eip = 0;  // beginning of initcode.S
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
-  p->cwd = namei("/");
 
   p->state = RUNNABLE;
 }
@@ -340,6 +339,7 @@ forkret(void)
     // be run from main().
     first = 0;
     iinit(ROOTDEV);
+    proc->cwd = namei("/");
     initlog(ROOTDEV);
   }
   
diff --git a/syscall.c b/syscall.c
index 799ebc2..f95e038 100644
--- a/syscall.c
+++ b/syscall.c
@@ -98,6 +98,7 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_mount(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -121,6 +122,7 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_mount]   sys_mount,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..cb3302a 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_mount  22
diff --git a/sysproc.c b/sysproc.c
index 027a5e5..0fed1ab 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,18 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int
+sys_mount(void)
+{
+  int partition;
+  char *path;
+  if(argptr(0, &path,sizeof(path)) < 0)
+    return -1;
+  if(argint(1,&partition)<0)
+    return -1;
+  return mount(path,partition);
+}
+
+
+
diff --git a/user.h b/user.h
index f45b8d5..1c70be6 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int mount(char*, uint);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index 8bfd8a1..ec2410d 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,4 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(mount)
